{"version":3,"sources":["Icon/types.js","Icon/Icon.js","components/WeatherCard/WeatherCard.js"],"names":["WEATHER_ICONS_BY_TYPE","rain","clear","clouds","unknown","Icon","type","weatherType","this","props","className","iconSize","small","medium","large","size","React","Component","WeatherHistoryCards","lazy","WeatherCard","useState","weather","setWeather","geolocation","useGeolocation","lat","latitude","lon","longitude","useEffect","getWeatherForCurrentLocation","a","URL","API_KEY","console","log","fetch","json","data","canHaveGeolocation","accuracy","weatherToday","list","tempDay","temp","day","getDateFromDT","dt","city","name","onClick","style","background","sliceTemp","main","toLowerCase","fallback"],"mappings":"uMAAMA,EAAwB,CAC1BC,KAAM,OACNC,MAAO,QACPC,OAAQ,SACRC,QAAS,WCAQC,E,uKAYP,IDTuBC,ECUrBC,EAAgBC,KAAKC,MAArBF,YAER,OACI,uBAAGG,UAAS,+BAA0BF,KAAKG,SAA/B,gBDbaL,ECasDC,EDZhFP,EAAsBM,GAAQ,iB,+BCKjC,MANc,CACVM,MAAO,KACPC,OAAQ,KACRC,MAAO,OAJMN,KAAKC,MAAdM,MAOa,a,GATKC,IAAMC,Y,iICGlCC,EAAsBC,gBAAK,kBAAM,gCAqExBC,UAnEK,SAACX,GAAW,IAAD,IACCY,qBADD,mBACtBC,EADsB,KACbC,EADa,KAEvBC,EAAcC,cAEdC,EAAMF,EAAYG,SAClBC,EAAMJ,EAAYK,UAExBC,qBAAU,WACRP,EAAWd,EAAMa,WAChB,CAACb,IAGJ,IAAMsB,EAA4B,uCAAG,gCAAAC,EAAA,6DAC7BC,EAD6B,qEACuCP,EADvC,gBACkDE,EADlD,kBAC+DM,KAClGC,QAAQC,IAAI,UAAWV,EAAKE,GAFO,SAGhBS,MAAMJ,GAHU,cAG7BK,EAH6B,gBAIhBA,EAAKA,OAJW,OAI7BC,EAJ6B,OAKnCJ,QAAQC,IAAI,uCAAwCG,GACpDhB,EAAWgB,GANwB,4CAAH,qDAS5BC,KAAsB,OAAChB,QAAD,IAACA,OAAD,EAACA,EAAaiB,UACpCC,EAAY,OAAGpB,QAAH,IAAGA,OAAH,EAAGA,EAASqB,KAAK,GAC7BC,EAAO,OAAGF,QAAH,IAAGA,GAAH,UAAGA,EAAcG,YAAjB,aAAG,EAAoBC,IAIpC,OAFAX,QAAQC,IAAI,uBAAwBI,GAGlC,yBAAK9B,UAAU,uBACZgC,GAAgB,6BAAShC,UAAU,8BAClC,yBAAKA,UAAU,WACb,yBAAKA,UAAU,qBACb,4BACGqC,YAAcL,EAAaM,GAAI,QADlC,QAEKD,YAAcL,EAAaM,GAAI,MAEpC,8BAAOD,YAAcL,EAAaM,GAAI,UAExC,yBAAKtC,UAAU,YACb,8BAAOY,EAAQ2B,KAAKC,MACnBV,GAAsB,yBAAK9B,UAAU,cAAcyC,QAASpB,GAC3D,kBAAC,IAAD,OAEO,yBAAKqB,MAAO,CAAEC,WAAY,OAAS3C,UAAU,cAAcyC,QAASpB,GAC3E,kBAAC,IAAD,SAKN,yBAAKrB,UAAU,qBACb,8BAAO4C,YAAUV,GAAjB,QACA,0BAAMlC,UAAU,YACd,kBAAC,IAAD,CACEK,KAAK,QACLR,YAAamC,EAAapB,QAAQ,GAAGiC,KAAKC,mBAMlD,kBAAC,WAAD,CAAUC,SAAU,cAClB,kBAACvC,EAAD,CAAqBI,QAASA","file":"static/js/4.fea3ff13.chunk.js","sourcesContent":["const WEATHER_ICONS_BY_TYPE = {\n    rain: \"rain\",\n    clear: \"clear\",\n    clouds: \"cloudy\",\n    unknown: \"unknown\"\n};\n\nexport const getIconByWeatherType = (type) => {\n    return WEATHER_ICONS_BY_TYPE[type || 'unknown'];\n}","import React from 'react';\n\nimport { getIconByWeatherType } from './types';\n\nexport default class Icon extends React.Component {\n    get iconSize() {\n        const { size } = this.props;\n        const sizes = {\n            small: '32',\n            medium: '64',\n            large: '128',\n        };\n\n        return sizes[size || 'small'];\n    }\n\n    render() {\n        const { weatherType } = this.props;\n\n        return (\n            <i className={`wu wu-solid-white wu-${this.iconSize} wu-${getIconByWeatherType(weatherType)}`} />\n        );\n    }\n}\n","import React, { lazy, Suspense, useEffect, useState } from \"react\";\nimport Icon from \"../../Icon/index\";\nimport { getDateFromDT, sliceTemp } from \"../../utils\";\nimport LocationOnOutlinedIcon from '@material-ui/icons/LocationOnOutlined';\nimport useGeolocation from 'react-hook-geolocation'\nimport { API_KEY } from \"../../utils\";\n\nconst WeatherHistoryCards = lazy(() => import(\"../weatherHistoryCards/weatherHistoryCards\"));\n\nconst WeatherCard = (props) => {\n  const [weather, setWeather] = useState();\n  const geolocation = useGeolocation();\n\n  const lat = geolocation.latitude;\n  const lon = geolocation.longitude;\n\n  useEffect(() => {\n    setWeather(props.weather);\n  }, [props])\n\n\n  const getWeatherForCurrentLocation = async () => {\n    const URL = `https://api.openweathermap.org/data/2.5/forecast/daily?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n    console.log(\"lat lon\", lat, lon)\n    const json = await fetch(URL);\n    const data = await json.json();\n    console.log(\"getWeatherForCurrentLocation -> data\", data)\n    setWeather(data);\n  }\n\n  const canHaveGeolocation = !!geolocation?.accuracy;\n  const weatherToday = weather?.list[0];\n  const tempDay = weatherToday?.temp?.day;\n\n  console.log('canHaveGeolocation: ', canHaveGeolocation);\n\n  return (\n    <div className='weatherCardLEftSide'>\n      {weatherToday && <section className='weatherCardLEftSide__inner'>\n        <div className='topLine'>\n          <div className='topLine__leftSide'>\n            <h1>\n              {getDateFromDT(weatherToday.dt, \"dddd\")} &nbsp;\n                {getDateFromDT(weatherToday.dt, \"D\")}\n            </h1>\n            <span>{getDateFromDT(weatherToday.dt, \"MMMM\")}</span>\n          </div>\n          <div className='cityName'>\n            <span>{weather.city.name}</span>\n            {canHaveGeolocation && <div className='locationBtn' onClick={getWeatherForCurrentLocation} >\n              <LocationOnOutlinedIcon />\n            </div>}\n            {true && <div style={{ background: 'red' }} className='locationBtn' onClick={getWeatherForCurrentLocation} >\n              <LocationOnOutlinedIcon />\n            </div>}\n          </div>\n\n        </div>\n        <div className='curentTemperature'>\n          <span>{sliceTemp(tempDay)}Â°</span>\n          <span className='mainIcon'>\n            <Icon\n              size='large'\n              weatherType={weatherToday.weather[0].main.toLowerCase()}\n            />\n          </span>\n        </div>\n      </section>}\n\n      <Suspense fallback={'Loading...'} >\n        <WeatherHistoryCards weather={weather} />\n      </Suspense>\n    </div>\n  );\n}\n\nexport default WeatherCard;"],"sourceRoot":""}