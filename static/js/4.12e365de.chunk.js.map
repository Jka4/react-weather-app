{"version":3,"sources":["Icon/types.js","Icon/Icon.js","components/WeatherCard/WeatherCard.js","components/WeatherCard/usePosition.jsx"],"names":["WEATHER_ICONS_BY_TYPE","rain","clear","clouds","unknown","Icon","type","weatherType","this","props","className","iconSize","small","medium","large","size","React","Component","WeatherHistoryCards","lazy","WeatherCard","useState","weather","setWeather","geolocation","useGeolocation","position","setPosition","error","setError","onChange","coords","latitude","longitude","onError","message","useEffect","geo","navigator","watcher","watchPosition","clearWatch","usePosition","console","log","lat","lon","getWeatherForCurrentLocation","a","URL","API_KEY","fetch","json","data","canHaveGeolocation","accuracy","weatherToday","list","tempDay","temp","day","getDateFromDT","dt","city","name","onClick","style","background","sliceTemp","main","toLowerCase","fallback"],"mappings":"uMAAMA,EAAwB,CAC1BC,KAAM,OACNC,MAAO,QACPC,OAAQ,SACRC,QAAS,WCAQC,E,uKAYP,IDTuBC,ECUrBC,EAAgBC,KAAKC,MAArBF,YAER,OACI,uBAAGG,UAAS,+BAA0BF,KAAKG,SAA/B,gBDbaL,ECasDC,EDZhFP,EAAsBM,GAAQ,iB,+BCKjC,MANc,CACVM,MAAO,KACPC,OAAQ,KACRC,MAAO,OAJMN,KAAKC,MAAdM,MAOa,a,GATKC,IAAMC,Y,yICKlCC,EAAsBC,gBAAK,kBAAM,gCAsExBC,UApEK,SAACX,GAAW,IAAD,IACCY,qBADD,mBACtBC,EADsB,KACbC,EADa,KAEvBC,EAAcC,cAFS,ECVJ,WAAO,IAAD,EACAJ,mBAAS,IADT,mBACzBK,EADyB,KACfC,EADe,OAENN,mBAAS,MAFH,mBAEzBO,EAFyB,KAElBC,EAFkB,KAI1BC,EAAW,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnBJ,EAAY,CACXK,SAAUD,EAAOC,SACjBC,UAAWF,EAAOE,aAGdC,EAAU,SAACN,GAChBC,EAASD,EAAMO,UAWhB,OATAC,qBAAU,WACT,IAAMC,EAAMC,UAAUd,YACtB,GAAKa,EAAL,CAIA,IAAME,EAAUF,EAAIG,cAAcV,EAAUI,GAC5C,OAAO,kBAAMG,EAAII,WAAWF,IAJ3BV,EAAS,kCAKR,IACI,2BAAKH,GAAZ,IAAsBE,UDRkBc,GAA/BV,EAJqB,EAIrBA,SAAUC,EAJW,EAIXA,UAAWL,EAJA,EAIAA,MAC7Be,QAAQC,IAAI,6BAA8BZ,EAAUC,EAAWL,GAG/D,IAAMiB,EAAMrB,EAAYQ,SAClBc,EAAMtB,EAAYS,UAExBG,qBAAU,WACRb,EAAWd,EAAMa,WAChB,CAACb,IAGJ,IAAMsC,EAA4B,uCAAG,gCAAAC,EAAA,6DAC7BC,EAD6B,qEACuCJ,EADvC,gBACkDC,EADlD,kBAC+DI,KAD/D,SAEhBC,MAAMF,GAFU,cAE7BG,EAF6B,gBAGhBA,EAAKA,OAHW,OAG7BC,EAH6B,OAInC9B,EAAW8B,GAJwB,2CAAH,qDAO5BC,KAAsB,OAAC9B,QAAD,IAACA,OAAD,EAACA,EAAa+B,UACpCC,EAAY,OAAGlC,QAAH,IAAGA,OAAH,EAAGA,EAASmC,KAAK,GAC7BC,EAAO,OAAGF,QAAH,IAAGA,GAAH,UAAGA,EAAcG,YAAjB,aAAG,EAAoBC,IAGpC,OACE,yBAAKlD,UAAU,uBACZ8C,GAAgB,6BAAS9C,UAAU,8BAClC,yBAAKA,UAAU,WACb,yBAAKA,UAAU,qBACb,4BACGmD,YAAcL,EAAaM,GAAI,QADlC,QAEKD,YAAcL,EAAaM,GAAI,MAEpC,8BAAOD,YAAcL,EAAaM,GAAI,UAExC,yBAAKpD,UAAU,YACb,8BAAOY,EAAQyC,KAAKC,MACnBV,GAAsB,yBAAK5C,UAAU,cAAcuD,QAASlB,GAC3D,kBAAC,IAAD,OAEO,yBAAKmB,MAAO,CAAEC,WAAY,OAASzD,UAAU,cAAcuD,QAASlB,GAC3E,kBAAC,IAAD,SAKN,yBAAKrC,UAAU,qBACb,8BAAO0D,YAAUV,GAAjB,QACA,0BAAMhD,UAAU,YACd,kBAACL,EAAA,EAAD,CACEU,KAAK,QACLR,YAAaiD,EAAalC,QAAQ,GAAG+C,KAAKC,mBAMlD,kBAAC,WAAD,CAAUC,SAAU,cAClB,kBAACrD,EAAD,CAAqBI,QAASA","file":"static/js/4.12e365de.chunk.js","sourcesContent":["const WEATHER_ICONS_BY_TYPE = {\n    rain: \"rain\",\n    clear: \"clear\",\n    clouds: \"cloudy\",\n    unknown: \"unknown\"\n};\n\nexport const getIconByWeatherType = (type) => {\n    return WEATHER_ICONS_BY_TYPE[type || 'unknown'];\n}","import React from 'react';\n\nimport { getIconByWeatherType } from './types';\n\nexport default class Icon extends React.Component {\n    get iconSize() {\n        const { size } = this.props;\n        const sizes = {\n            small: '32',\n            medium: '64',\n            large: '128',\n        };\n\n        return sizes[size || 'small'];\n    }\n\n    render() {\n        const { weatherType } = this.props;\n\n        return (\n            <i className={`wu wu-solid-white wu-${this.iconSize} wu-${getIconByWeatherType(weatherType)}`} />\n        );\n    }\n}\n","import React, { lazy, Suspense, useEffect, useState } from \"react\";\nimport Icon from \"../../Icon/index\";\nimport { getDateFromDT, sliceTemp } from \"../../utils\";\nimport LocationOnOutlinedIcon from '@material-ui/icons/LocationOnOutlined';\nimport useGeolocation from 'react-hook-geolocation'\nimport { API_KEY } from \"../../utils\";\n\nimport { usePosition } from './usePosition';\n\nconst WeatherHistoryCards = lazy(() => import(\"../weatherHistoryCards/weatherHistoryCards\"));\n\nconst WeatherCard = (props) => {\n  const [weather, setWeather] = useState();\n  const geolocation = useGeolocation();\n\n  const { latitude, longitude, error } = usePosition();\n  console.log(\"latitude, longitude, error\", latitude, longitude, error)\n\n\n  const lat = geolocation.latitude;\n  const lon = geolocation.longitude;\n\n  useEffect(() => {\n    setWeather(props.weather);\n  }, [props])\n\n\n  const getWeatherForCurrentLocation = async () => {\n    const URL = `https://api.openweathermap.org/data/2.5/forecast/daily?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n    const json = await fetch(URL);\n    const data = await json.json();\n    setWeather(data);\n  }\n\n  const canHaveGeolocation = !!geolocation?.accuracy;\n  const weatherToday = weather?.list[0];\n  const tempDay = weatherToday?.temp?.day;\n\n\n  return (\n    <div className='weatherCardLEftSide'>\n      {weatherToday && <section className='weatherCardLEftSide__inner'>\n        <div className='topLine'>\n          <div className='topLine__leftSide'>\n            <h1>\n              {getDateFromDT(weatherToday.dt, \"dddd\")} &nbsp;\n                {getDateFromDT(weatherToday.dt, \"D\")}\n            </h1>\n            <span>{getDateFromDT(weatherToday.dt, \"MMMM\")}</span>\n          </div>\n          <div className='cityName'>\n            <span>{weather.city.name}</span>\n            {canHaveGeolocation && <div className='locationBtn' onClick={getWeatherForCurrentLocation} >\n              <LocationOnOutlinedIcon />\n            </div>}\n            {true && <div style={{ background: 'red' }} className='locationBtn' onClick={getWeatherForCurrentLocation} >\n              <LocationOnOutlinedIcon />\n            </div>}\n          </div>\n\n        </div>\n        <div className='curentTemperature'>\n          <span>{sliceTemp(tempDay)}Â°</span>\n          <span className='mainIcon'>\n            <Icon\n              size='large'\n              weatherType={weatherToday.weather[0].main.toLowerCase()}\n            />\n          </span>\n        </div>\n      </section>}\n\n      <Suspense fallback={'Loading...'} >\n        <WeatherHistoryCards weather={weather} />\n      </Suspense>\n    </div>\n  );\n}\n\nexport default WeatherCard;","import { useState, useEffect } from 'react';\nexport const usePosition = () => {\n\tconst [position, setPosition] = useState({});\n\tconst [error, setError] = useState(null);\n\n\tconst onChange = ({ coords }) => {\n\t\tsetPosition({\n\t\t\tlatitude: coords.latitude,\n\t\t\tlongitude: coords.longitude,\n\t\t});\n\t};\n\tconst onError = (error) => {\n\t\tsetError(error.message);\n\t};\n\tuseEffect(() => {\n\t\tconst geo = navigator.geolocation;\n\t\tif (!geo) {\n\t\t\tsetError('Geolocation is not supported');\n\t\t\treturn;\n\t\t}\n\t\tconst watcher = geo.watchPosition(onChange, onError);\n\t\treturn () => geo.clearWatch(watcher);\n\t}, []);\n\treturn { ...position, error };\n}"],"sourceRoot":""}