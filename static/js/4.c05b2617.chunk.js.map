{"version":3,"sources":["Icon/types.js","Icon/Icon.js","components/WeatherCard/WeatherCard.js","components/WeatherCard/usePosition.js"],"names":["WEATHER_ICONS_BY_TYPE","rain","clear","clouds","unknown","Icon","type","weatherType","this","props","className","iconSize","small","medium","large","size","React","Component","WeatherHistoryCards","lazy","WeatherCard","useState","weather","setWeather","position","setPosition","error","setError","onChange","coords","lat","latitude","lon","longitude","onError","message","useEffect","geo","navigator","geolocation","watcher","watchPosition","clearWatch","usePosition","console","getWeatherForCurrentLocation","a","URL","API_KEY","fetch","json","data","weatherToday","list","tempDay","temp","day","getDateFromDT","dt","city","name","onClick","sliceTemp","main","toLowerCase","fallback"],"mappings":"uMAAMA,EAAwB,CAC1BC,KAAM,OACNC,MAAO,QACPC,OAAQ,SACRC,QAAS,WCAQC,E,uKAYP,IDTuBC,ECUrBC,EAAgBC,KAAKC,MAArBF,YAER,OACI,uBAAGG,UAAS,+BAA0BF,KAAKG,SAA/B,gBDbaL,ECasDC,EDZhFP,EAAsBM,GAAQ,iB,+BCKjC,MANc,CACVM,MAAO,KACPC,OAAQ,KACRC,MAAO,OAJMN,KAAKC,MAAdM,MAOa,a,GATKC,IAAMC,Y,iICIlCC,EAAsBC,gBAAK,kBAAM,gCA4DxBC,UA1DK,SAACX,GAAW,IAAD,IACCY,qBADD,mBACtBC,EADsB,KACbC,EADa,OCTJ,WAAO,IAAD,EACAF,mBAAS,IADT,mBACzBG,EADyB,KACfC,EADe,OAENJ,mBAAS,MAFH,mBAEzBK,EAFyB,KAElBC,EAFkB,KAI1BC,EAAW,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnBJ,EAAY,CACXK,IAAKD,EAAOE,SACZC,IAAKH,EAAOI,aAGRC,EAAU,SAACR,GAChBC,EAASD,EAAMS,UAWhB,OATAC,qBAAU,WACT,IAAMC,EAAMC,UAAUC,YACtB,GAAKF,EAAL,CAIA,IAAMG,EAAUH,EAAII,cAAcb,EAAUM,GAC5C,OAAO,kBAAMG,EAAIK,WAAWF,IAJ3Bb,EAAS,kCAKR,IACI,2BAAKH,GAAZ,IAAsBE,UDXOiB,GAApBb,EAFqB,EAErBA,IAAKE,EAFgB,EAEhBA,IAAKN,EAFW,EAEXA,MAClBA,GAASkB,QAAQlB,MAAM,UAAWA,GAElCU,qBAAU,WACRb,EAAWd,EAAMa,WAChB,CAACb,IAGJ,IAAMoC,EAA4B,uCAAG,gCAAAC,EAAA,6DAC7BC,EAD6B,qEACuCjB,EADvC,gBACkDE,EADlD,kBAC+DgB,KAD/D,SAEhBC,MAAMF,GAFU,cAE7BG,EAF6B,gBAGhBA,EAAKA,OAHW,OAG7BC,EAH6B,OAInC5B,EAAW4B,GAJwB,2CAAH,qDAO5BC,EAAY,OAAG9B,QAAH,IAAGA,OAAH,EAAGA,EAAS+B,KAAK,GAC7BC,EAAO,OAAGF,QAAH,IAAGA,GAAH,UAAGA,EAAcG,YAAjB,aAAG,EAAoBC,IAGpC,OACE,yBAAK9C,UAAU,uBACZ0C,GAAgB,6BAAS1C,UAAU,8BAClC,yBAAKA,UAAU,WACb,yBAAKA,UAAU,qBACb,4BACG+C,YAAcL,EAAaM,GAAI,QADlC,QAEKD,YAAcL,EAAaM,GAAI,MAEpC,8BAAOD,YAAcL,EAAaM,GAAI,UAExC,yBAAKhD,UAAU,YACb,8BAAOY,EAAQqC,KAAKC,OAClBlC,GAASI,GAAO,yBAAKpB,UAAU,cAAcmD,QAAShB,GACtD,kBAAC,IAAD,SAKN,yBAAKnC,UAAU,qBACb,8BAAOoD,YAAUR,GAAjB,QACA,0BAAM5C,UAAU,YACd,kBAACL,EAAA,EAAD,CACEU,KAAK,QACLR,YAAa6C,EAAa9B,QAAQ,GAAGyC,KAAKC,mBAMlD,kBAAC,WAAD,CAAUC,SAAU,cAClB,kBAAC/C,EAAD,CAAqBI,QAASA","file":"static/js/4.c05b2617.chunk.js","sourcesContent":["const WEATHER_ICONS_BY_TYPE = {\n    rain: \"rain\",\n    clear: \"clear\",\n    clouds: \"cloudy\",\n    unknown: \"unknown\"\n};\n\nexport const getIconByWeatherType = (type) => {\n    return WEATHER_ICONS_BY_TYPE[type || 'unknown'];\n}","import React from 'react';\n\nimport { getIconByWeatherType } from './types';\n\nexport default class Icon extends React.Component {\n    get iconSize() {\n        const { size } = this.props;\n        const sizes = {\n            small: '32',\n            medium: '64',\n            large: '128',\n        };\n\n        return sizes[size || 'small'];\n    }\n\n    render() {\n        const { weatherType } = this.props;\n\n        return (\n            <i className={`wu wu-solid-white wu-${this.iconSize} wu-${getIconByWeatherType(weatherType)}`} />\n        );\n    }\n}\n","import React, { lazy, Suspense, useEffect, useState } from \"react\";\nimport Icon from \"../../Icon/index\";\nimport { getDateFromDT, sliceTemp } from \"../../utils\";\nimport LocationOnOutlinedIcon from '@material-ui/icons/LocationOnOutlined';\nimport { API_KEY } from \"../../utils\";\n\nimport { usePosition } from './usePosition';\n\nconst WeatherHistoryCards = lazy(() => import(\"../weatherHistoryCards/weatherHistoryCards\"));\n\nconst WeatherCard = (props) => {\n  const [weather, setWeather] = useState();\n  const { lat, lon, error } = usePosition();\n  error && console.error('error: ', error)\n\n  useEffect(() => {\n    setWeather(props.weather);\n  }, [props])\n\n\n  const getWeatherForCurrentLocation = async () => {\n    const URL = `https://api.openweathermap.org/data/2.5/forecast/daily?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n    const json = await fetch(URL);\n    const data = await json.json();\n    setWeather(data);\n  }\n\n  const weatherToday = weather?.list[0];\n  const tempDay = weatherToday?.temp?.day;\n\n\n  return (\n    <div className='weatherCardLEftSide'>\n      {weatherToday && <section className='weatherCardLEftSide__inner'>\n        <div className='topLine'>\n          <div className='topLine__leftSide'>\n            <h1>\n              {getDateFromDT(weatherToday.dt, \"dddd\")} &nbsp;\n                {getDateFromDT(weatherToday.dt, \"D\")}\n            </h1>\n            <span>{getDateFromDT(weatherToday.dt, \"MMMM\")}</span>\n          </div>\n          <div className='cityName'>\n            <span>{weather.city.name}</span>\n            {!error && lat && <div className='locationBtn' onClick={getWeatherForCurrentLocation} >\n              <LocationOnOutlinedIcon />\n            </div>}\n          </div>\n\n        </div>\n        <div className='curentTemperature'>\n          <span>{sliceTemp(tempDay)}Â°</span>\n          <span className='mainIcon'>\n            <Icon\n              size='large'\n              weatherType={weatherToday.weather[0].main.toLowerCase()}\n            />\n          </span>\n        </div>\n      </section>}\n\n      <Suspense fallback={'Loading...'} >\n        <WeatherHistoryCards weather={weather} />\n      </Suspense>\n    </div>\n  );\n}\n\nexport default WeatherCard;","import { useState, useEffect } from 'react';\nexport const usePosition = () => {\n\tconst [position, setPosition] = useState({});\n\tconst [error, setError] = useState(null);\n\n\tconst onChange = ({ coords }) => {\n\t\tsetPosition({\n\t\t\tlat: coords.latitude,\n\t\t\tlon: coords.longitude,\n\t\t});\n\t};\n\tconst onError = (error) => {\n\t\tsetError(error.message);\n\t};\n\tuseEffect(() => {\n\t\tconst geo = navigator.geolocation;\n\t\tif (!geo) {\n\t\t\tsetError('Geolocation is not supported');\n\t\t\treturn;\n\t\t}\n\t\tconst watcher = geo.watchPosition(onChange, onError);\n\t\treturn () => geo.clearWatch(watcher);\n\t}, []);\n\treturn { ...position, error };\n}"],"sourceRoot":""}